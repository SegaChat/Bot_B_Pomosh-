import logging
import os.path
import telebot
from telebot import types
from config import TOKEN, LOGS_PATH, Creater_ID, MAX_USERS, MAX_TOKENS_IN_SESSION, MAX_SESSIONS
from gpt import ask_gpt, create_prompt, count_tokens
from info import genres, characters, settings

TOKEN = '6790954372:AAH_oaCFd_f-iZoAAd0OtSZG1SXJ6OyNsb4'

logging.basicConfig(
    filename=LOGS_PATH,
    level=logging.DEBUG,
    format="%(asctime)s %(name)s %(levelname)s %(message)s",
    filemode="w"
)

bot = telebot.TeleBot(TOKEN)

user_data = {}
user_collection = {}

def menu_keyboard(options):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    buttons = (types.KeyboardButton(text=option) for option in options)
    keyboard = types.ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_name = message.from_user.first_name
    user_id = message.from_user.id

    user_collection[user_id] = []

    if not user_data.get(user_id):
        user_data[user_id] = {
            'session_id': 0,
            'genre': None,
            'character': None,
            'setting': None,
            'state': '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
            'session_tokens': 0
        }

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.\n"
                                      f"–ú—ã –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ. –Ø –Ω–∞—á–Ω—É, –∞ —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n"
                                      "–ù–∞–ø–∏—à–∏ /new_story, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é.\n"
                                      f"–ê –∫–æ–≥–¥–∞ —Ç—ã –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–ø–∏—à–∏ /end.",
                     reply_markup=menu_keyboard(["/new_story"]))


@bot.message_handler(commands=['begin'])
def begin_story(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /begin."""
    user_id = message.from_user.id
    if user_id not in user_data or user_data[user_id]['state'] == '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        bot.send_message(message.chat.id, "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –Ω—É–∂–Ω–æ –¥–æ–ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é -> /new_story")
        return

    user_data[user_id]['state'] = '–≤ –∏—Å—Ç–æ—Ä–∏–∏'
    get_story(message)



@bot.message_handler(commands=['debug'])
def send_logs(message):
    if message.from_user.id == Creater_ID:
        if os.path.exists(LOGS_PATH):
            bot.send_document(message.chat.id, open(LOGS_PATH, 'rb'))
        else:
            bot.send_message(message.chat.id, "–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤—ã.")


@bot.message_handler(commands=['end'])
def end_the_story(message):
    user_id = message.from_user.id
    if user_id not in user_collection:
        bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏—é. –ù–∞—á–Ω–∏—Ç–µ —Å /begin.")
        return

    gpt_text = ask_gpt(user_collection[user_id], mode='end')
    bot.send_message(message.chat.id, gpt_text, reply_markup=menu_keyboard(["/new_story", "/debug"]))
    user_collection[user_id] = []
    user_data[user_id]['session_tokens'] = 0
    user_data[user_id]['state'] = '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'



@bot.message_handler(commands=['new_story'])
def registration(message):
    users_amount = len(user_data)
    if users_amount > MAX_USERS:
        bot.send_message(message.chat.id, '–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–µ–Ω')
        return

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=menu_keyboard(genres))
    bot.register_next_step_handler(message, handle_genre)



def handle_genre(message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∂–∞–Ω—Ä–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ."""
    user_id = message.from_user.id
    genre = message.text
    if genre not in genres:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∂–∞–Ω—Ä–æ–≤:",
                         reply_markup=menu_keyboard(genres))
        bot.register_next_step_handler(message, handle_genre)
        return
    user_data[user_id]['genre'] = genre
    user_data[user_id]['state'] = '–≤ –∏—Å—Ç–æ—Ä–∏–∏'
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è:",
                     reply_markup=menu_keyboard(characters))
    bot.register_next_step_handler(message, handle_character)


def handle_character(message):
    user_id = message.from_user.id
    character = message.text
    if character not in characters:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:", reply_markup=menu_keyboard(characters))
        bot.register_next_step_handler(message, handle_character)
        return
    user_data[user_id]['character'] = character
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–µ—Ç—Ç–∏–Ω–≥:", reply_markup=menu_keyboard(settings))
    bot.register_next_step_handler(message, handle_setting)



def handle_setting(message):
    user_id = message.from_user.id
    setting = message.text
    if setting not in settings:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–µ—Ç—Ç–∏–Ω–≥–æ–≤:", reply_markup=menu_keyboard(settings))
        bot.register_next_step_handler(message, handle_setting)
        return
    user_data[user_id]['setting'] = setting
    user_data[user_id]['state'] = '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞'
    bot.send_message(message.chat.id, "–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø–∏—Å–∞–≤ /begin.", reply_markup=menu_keyboard(["/begin"]))



@bot.message_handler(content_types=['text'])
def story_handler(message):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É "/end"
    –∏–ª–∏ –Ω–µ –≤—ã–π–¥–µ—Ç –∑–∞ –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ—Å—Å–∏–∏. –í—Å–µ –æ—Ç–≤–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å
    –≤ —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –±–ª–∞–≥–æ–¥–∞—Ä—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—É "message_handler(content_types=['text'])"
    """
    user_id = message.from_user.id
    user_answer = message.text

    user_collection[user_id].append({'role': 'user', 'content': user_answer})

    tokens_in_user_answer = count_tokens(user_answer)

    user_data[user_id]['session_tokens'] += tokens_in_user_answer

    tokens = 0
    for row in user_collection[user_id]:
        tokens += count_tokens(row['content'])

    user_data[user_id]['session_tokens'] += tokens

    if user_data[user_id]['session_tokens'] > MAX_TOKENS_IN_SESSION:
        bot.send_message(
            message.chat.id,
            '–í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã –≤—ã –≤—ã—à–ª–∏ –∑–∞ –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –≤–≤–µ–¥—è new_story',
            reply_markup=menu_keyboard(["/new_story", "/end"])
        )
        return

    gpt_text = ask_gpt(user_collection[user_id])
    user_collection[user_id].append({'role': 'assistant', 'content': gpt_text})

    tokens_in_gpt_answer = count_tokens(gpt_text)
    user_data[user_id]['session_tokens'] += tokens_in_gpt_answer

    bot.send_message(message.chat.id, gpt_text, reply_markup=menu_keyboard(['/end']))


def get_story(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é.
    """
    user_id = message.from_user.id
    user_data[user_id]['session_id'] += 1

    if user_data[user_id]['session_id'] > MAX_SESSIONS:
        bot.send_message(
            user_id,
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π üò¢\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ)'
        )
        return

    user_story = create_prompt(user_data[user_id])

    user_collection[user_id].append({'role': 'system', 'content': user_story})
    tokens_for_start_story = count_tokens(user_story)

    user_data[user_id]['session_tokens'] += tokens_for_start_story

    bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é...")

    gpt_text = ask_gpt(user_collection[user_id])
    user_collection[user_id].append({'role': 'assistant', 'content': gpt_text})
    tokens_in_gpt_answer = count_tokens(gpt_text)

    user_data[user_id]['session_tokens'] += tokens_in_gpt_answer

    if user_data[user_id]['session_tokens'] > MAX_TOKENS_IN_SESSION:
        bot.send_message(
            message.chat.id,
            '–í —Ä–∞–º–∫–∞—Ö –¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã –≤—ã –≤—ã—à–ª–∏ –∑–∞ –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –≤–≤–µ–¥—è new_story',
            reply_markup=menu_keyboard(["/new_story", "/end"])
        )
        return

    if gpt_text is None:
        bot.send_message(
            message.chat.id,
            "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT :(",
            reply_markup=menu_keyboard(["/new_story", "/end"])
        )

    elif gpt_text == "":
        bot.send_message(
            message.chat.id,
            "–ù–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ :(",
            reply_markup=menu_keyboard(["/new_story", "/end"])
        )
        logging.info(f"TELEGRAM BOT: Input: {message.text}\nOutput: Error: –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")

    else:
        msg = bot.send_message(message.chat.id, gpt_text)
        bot.register_next_step_handler(msg, story_handler)


bot.infinity_polling()
